{"pageProps":{"entry":{"entry":"renew-blog-nextjs","title":"ブログを Next.js で作り直した","date":"2020-08-30","tags":["Blog"],"type":"md"},"text":"<p>このブログを <a href=https://nextjs.org/ target='_blank' rel='noopener'>Next.js</a> で作り直した。以前に動いていたものをほぼ再現できたと思う。</p>\n<h2>嬉しくなった点</h2>\n<h3>ソースコードが大幅に読みやすくなった</h3>\n<p>以前は自作ルーター + 巨大 <a href=https://github.com/comame/blog.comame.xyz/blob/707d9271f0e17eddd231ee7041408566e424bbdc/assets/js/app.js target='_blank' rel='noopener'>app.js</a> で全てを行っていたため、これは何ですかと言いたくなるようなコードになっていた。</p>\n<h3>アクセス時に読み込まれる CSS が少し小さくなった</h3>\n<p>以前はページごとに 3 つの CSS ファイルに分割し、minify したものを HTML に埋め込んでいた。今は Next.js がうまいことコンポーネント分割してくれている、らしい。</p>\n<p>以前はインラインで記述していたためすべてのアクセスでダウンロード量に影響したが、今は <code>&lt;link&gt;</code> タグで埋め込まれているため、初回より後のアクセスでは読み込みが速くなると思われる。ただ、初回アクセスでどちらが速いのかはよく分かっていない。</p>\n<h3>GitHub Actions でのビルドが相当速くなった</h3>\n<p>以前は Puppeteer を使って静的サイトジェネレーションを行っていたが、それを Next.js がやってくれるようになったおかげで、ビルドが相当高速化した。以前は 1 分以上かかっていたものが、今は 30 秒程度で終わるようになった。</p>\n<h3>開発環境でのプレビューが容易になった</h3>\n<p><code>npx next dev</code> を叩くだけで容易にプレビューできるようになった。</p>\n<h2>私はここで苦しみました</h2>\n<h3>SSG をすると、<code>next/link</code> のリンクが機能しない</h3>\n<p>これは以前の URL 構造をそのまま保とうとしたことが原因であるため、どちらかといえば私の使い方の問題であろう。Next.js の Dynamic Routing では、各ページの URL に <code>.html</code> の拡張子を付与することはできないため、SSG したときにサイト内リンクが尽くリンク切れを起こす問題が発生した。例えば、SSG 後の URL は <code>/tags/foo.html</code> であるにも関わらず、サイト内リンクの <code>href</code> は <code>/tags/foo</code> のままである、といった具合である。</p>\n<p>この問題は Next.js の設定を弄ることで容易に解消できる。<code>next.config.js</code> で <a href=https://nextjs.org/docs/api-reference/next.config.js/trailing-slash target='_blank' rel='noopener'><code>trailingSlash: true</code></a> を設定すればよい。しかし、私のブログの URL 構造を保とうとした場合、これでは過去のリンクがすべてリンク切れを起こしてしまう問題があり、この方法は導入できなかった。</p>\n<p>そこで、<code>&lt;Link&gt;</code> をラップし、SSG を行うときは手動で <code>&lt;a&gt;</code> タグを返すようにした。SSG かどうかは環境変数によって判別することとした (<a href=https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser target='_blank' rel='noopener'>NEXT_PUBLIC_ から始まる環境変数はブラウザからも参照できる</a>) 。</p>\n<p>参照: <a href=https://github.com/comame/blog.comame.xyz/blob/b7b80220685f6c568bcb9cfedf820db953899123/src/lib/link.tsx target='_blank' rel='noopener'>https://github.com/comame/blog.comame.xyz/blob/b7b80220685f6c568bcb9cfedf820db953899123/src/lib/link.tsx</a></p>\n<h3>GitHub Pages でうまいことホストされない</h3>\n<p>以前と同様に GitHub Pages でホストしようと思ったところ、なぜか <code>docs/_next/</code> 配下のファイルが 404 を返してしまう問題に遭遇した。これは GitHub Pages に組み込まれている Jekyll が原因であり、<code>_</code> から始まるディレクトリ名を持つディレクトリは配信されないようである。</p>\n<p>これを解消するために、GitHub Pages で配信するディレクトリの最上位ディレクトリ (このブログでは <code>&lt;projectroot&gt;/docs/</code>) に `.nojekyll ファイルを置いた。</p>\n<p>どうやらこの方法は GitHub のドキュメントには書かれておらず、<a href=https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/ target='_blank' rel='noopener'>GitHub Blog</a> にしか公式の記事を見つけることができなかった。</p>\n"},"__N_SSG":true}