{"pageProps":{"entry":{"entry":"improve-perforcmance-docker-build-gradle","title":"Docker を使用したGradle のビルドを高速化する","date":"2020-07-02","tags":["Kotlin","note"],"type":"md"},"text":"<h2>問題</h2>\n<p>Docker で <code>gradle build</code> を実行すると、<code>Starting a Gradle Daemon</code> で 1 分近くかかってしまう。</p>\n<h2>解決法</h2>\n<p>適当に <code>gradle clean</code> などをあらかじめ実行しておく</p>\n<pre>\n<code>  # Dockerfile</code>\n<code></code>\n<code>  FROM gradle</code>\n<code></code>\n<code>  COPY build.gradle.kt build.gradle.kt</code>\n<code></code>\n<code class='addition'>+ RUN gradle clean</code>\n<code></code>\n<code>  COPY src src</code>\n<code>  RUN gradle build</code>\n<code></code>\n</pre><p>Daemon 起動中の出力を見る限り、依存関係の計算やダウンロード、<code>build.gradle.kt</code> のコンパイルに時間がかかっているように見える。一度 <code>gradle clean</code> を実行することによって、<code>gradle build</code> の実行時にはそれらを回避できる。また、<code>src/</code> 以下を変更しただけの場合 <code>RUN gradle clean</code> はキャッシュが利用できるため、初回ビルドより後では高速にビルドできる。</p>\n<h2>測定</h2>\n<p>簡単な Hello, world! コードで検証した。次に記載するファイル以外は IntelliJ IDEA で生成されたものをそのまま使用した。</p>\n<pre>\n<code># src/main/kotlin/xyz/comame/test/Main.kt</code>\n<code></code>\n<code>package xyz.comame.test</code>\n<code></code>\n<code>fun main() {</code>\n<code>    println(\"Hello,world!\")</code>\n<code>}</code>\n</pre><pre>\n<code># Dockerfile</code>\n<code></code>\n<code>FROM gradle</code>\n<code></code>\n<code>RUN useradd -m user</code>\n<code>USER user</code>\n<code>WORKDIR /home/user</code>\n<code></code>\n<code>COPY gradle.properties gradle.properties</code>\n<code>COPY settings.gradle.kts settings.gradle.kts</code>\n<code>COPY build.gradle.kts build.gradle.kts</code>\n<code></code>\n<code>RUN gradle clean</code>\n<code></code>\n<code>COPY src src</code>\n<code>RUN gradle build</code>\n</pre><h3>初回ビルド</h3>\n<p><code>RUN gradle clean</code> を追加した場合、<code>RUN gradle clean</code> は 49 秒、<code>RUN gradle build</code> は 18 秒かかった。一方、追加しなかった場合、<code>RUN gradle build</code> は 56 秒かかった。</p>\n<h3>2 回目のビルド</h3>\n<p><code>src/main/kotlin/xyz/comame/test/Main.kt</code> の Hello, world! の文字列を変更して再度ビルドした。<code>docker build</code> のキャッシュは有効である。</p>\n<p><code>RUN gradle clean</code> を追加した場合、<code>RUN gradle clean</code> はキャッシュが使用され、<code>RUN gradle build</code> は 18 秒かかった。一方、追加しなかった場合、<code>RUN gradle build</code> は 1 分 3 秒かかった。</p>\n<p>複数回測定を繰り返した場合でも、上記とおおむね同様の結果を得られた。</p>\n<h2>考慮事項</h2>\n<p>Dockerfile に <code>USER root</code> 、<code>WORKDIR /root</code> を指定した場合、<code>RUN gradle build</code> は高速化されなかった。<code>root</code> ユーザーでは効果がないのか、<code>WORKDIR /root</code> の場合に問題があるのか、あるいは他に原因があるのか、今回は未検証である。</p>\n"},"__N_SSG":true}