{"pageProps":{"entry":{"entry":"improve-web-performance","title":"Web ページの読み込みパフォーマンスを改善する","date":"2019-04-23","tags":["Web"],"type":"md"},"text":"<h2>TL;DR</h2>\n<ol>\n<li>レンダリングブロッキング要素を減らす<ol>\n<li><code>&lt;script&gt;</code></li>\n<li><code>&lt;link rel=&quot;stylesheet&quot;&gt;</code></li>\n</ol>\n</li>\n<li>Web フォントのロードを制御する</li>\n<li>画像を最適化する</li>\n<li>地理的に近い場所にサーバを置く</li>\n</ol>\n<h2>レンダリングブロッキング要素を減らす</h2>\n<p>ブラウザのレンダラは、HTML を上から順に (ファイルに記述してある順に) 解釈して DOM を構築します。途中で JavaScript や CSS が埋め込まれている場合は、スクリプトの実行やスタイルの計算が終わるまで DOM の構築は中断されます。これをレンダリングブロッキングと呼びます。</p>\n<h3><code>&lt;script&gt;</code></h3>\n<p>最も効果的な対処法は、<code>async</code> 属性をつけることです。<code>async</code> 属性が付与されたスクリプトは、DOM の構築を妨げません。特に、外部リソースを取得するような場合に効果が発揮されます。一方で、複数の <code>&lt;script&gt;</code> タグにそれぞれ <code>async</code> 属性が付与されていた場合、実行順序が保証されないことに注意が必要です。<code>HTMLScriptElement.onload</code> イベントを活用するのが良いでしょう。</p>\n<h3><code>&lt;link rel=&quot;stylesheet&quot;&gt;</code></h3>\n<p><code>&lt;script&gt;</code> タグの場合は <code>async</code> 属性をつけるだけで済みましたね。しかし、<code>&lt;link&gt;</code> タグには非同期に読み込ませるような属性は存在しません。そのため、JavaScript を使用して非同期に読み込ませるような処理を書くことになります。</p>\n<pre>\n<code><head></code>\n<code>  <noscript id=\"async-styles\"></code>\n<code>  <link rel=\"stylesheet\" href=\"style.css\"></code>\n<code>  </noscript></code>\n<code>  <script></code>\n<code>  window.requestAnimationFrame(() => {</code>\n<code>    document.head.innerHTML +=</code>\n<code>    document.getElementById('async-styles').textContent;</code>\n<code>  });</code>\n<code>  </script></code>\n<code></head></code>\n</pre><p>あるいは、<code>&lt;style&gt;</code> タグを使用して HTML に埋め込んでしまうのも有効です。ただし、再利用性が低いこと、Contents Security Policy との相性が悪いことに注意が必要です。</p>\n<p>実際のところ、レンダリングブロックする要素を減らすだけでも相当な効果が見込めます。適切にレンダリングブロックを制御した場合、リソースのダウンロードがすべて完了していなくとも必要最低限の要素だけ表示させることができます。</p>\n<p>一方で、JavaScript の実行が必須な Web アプリケーションの場合、表示されているのに操作できない時間が発生することになります。このような場合は、ローディングアニメーションを表示するか、あるいは意図的にレンダリングブロックを発生させるという手段も選択肢となり得るでしょう。</p>\n<h2>Web フォントのロードを制御する</h2>\n<p>Web フォントというのはとても便利なものです。導入が簡単にもかかわらず、Web ページの印象を大きく変えてくれます。</p>\n<p>しかし、無頓着に Web フォントを使うのは考えものです。ネットワークの速度が遅い環境では、Web フォントのロードが終わるまで文字が表示されないかもしれません。(みなさんも経験ありませんか？) 酷い場合にはユーザーを5秒以上待たせてしまうこともあります。</p>\n<p>これは CSS ファイルにほんの数行付け足すだけで解決できます。</p>\n<pre>\n<code>@font-face {</code>\n<code>  /* ... */</code>\n<code>  font-display: swap;</code>\n<code>}</code>\n</pre><p>この 1 行を付け足すだけで、ブラウザは Web フォントがロードされるまでは、オフラインで使用可能な他のフォントで代わりに表示してくれます！</p>\n<h2>画像を最適化する</h2>\n<p>Web ページの平均サイズはどんどん巨大化しています。そして、そのうちの大部分を画像が占めています。画像のファイルサイズを少しでも減らすことができれば、きっともう少しページの読み込みが早くなることでしょう。</p>\n<p>WebP など最新のフォーマットを有効活用しましょう。フォーマットに気を配るだけで、ファイルサイズを大幅に削減できます。</p>\n<p><code>&lt;picture&gt;</code> タグを使って複数のフォーマットの画像を選択できるようにすれば、最新のフォーマットに対応していないようなブラウザでも正常に画像を表示させることができます。</p>\n<h2>最後に&gt;</h2>\n<p>これらの対策を施したら、最適化の効果の程を確かめてみましょう。Chrome ブラウザを使用しているのであれば、DevTools の Audits タブでパフォーマンスを調査できます。</p>\n<p>また、<a href=https://developers.google.com/speed/pagespeed/insights/?hl=ja target='_blank' rel='noopener'>PageSpeed Insights</a> を使用するのもおすすめです。</p>\n<p>ここに紹介した以外にもたくさんの高速化の手法があります。調べてみると良いでしょう。</p>\n<ul>\n<li>Resource Hints</li>\n<li>Service Worker + Cache API</li>\n<li>Lazy Load (Intersection Observer v2 とかいい感じに使えそう)</li>\n<li>レイアウトを静的に指定する</li>\n<li>AMP (Accelerated Mobile Pages)</li>\n<li>SSR (Server Side Rendering)</li>\n</ul>\n<h2>2019/07/04 追記</h2>\n<p>上にメモした Lazy Loading ですが、Chrome に <code>loading</code> 属性が追加されました。まだ実用段階ではなさそうですが、注目していきたいです。</p>\n<h2>2019/07/10 また追記</h2>\n<p>今まで Google Compute Engine の US リージョンに置いていましたが、ConoHa の東京リージョンに置くようにしたらめちゃくちゃ速度が改善しました。地理的な要因も見過ごせませんね。</p>\n"},"__N_SSG":true}